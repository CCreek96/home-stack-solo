version: '3.7'

networks:

        traefik_proxy:
                external: true
        media_proxy:
               driver: bridge
        socket_proxy:
                driver: bridge
        default:
                driver: bridge

volumes:
        transcode:
                driver_opts:
                        type: tmpfs
                        device: tmpfs

services:

        dockerproxy:
                container_name: dockerproxy
                image: tprasadtp/docker-socket-proxy
                hostname: dockerproxy
                restart: unless-stopped
                networks: 
                        - socket_proxy
                ports:
                        - "127.0.0.1:2375:2375"
                volumes:
                        - "/var/run/docker.sock:/var/run/docker.sock:ro"
                environment:
                        - CONTAINERS=1
                labels:
                        - "com.ouroboros.enabled=false"

        traefik:
                container_name: traefik
                image: traefik:latest
                hostname: traefik
                restart: unless-stopped
                healthcheck:
                        test: ping -c 2 traefik || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                security_opt:
                        - no-new-privileges:true
                networks:
                        - traefik_proxy
                        - socket_proxy
                        - default
                ports:
                        - "80:80"
                        - "443:443/tcp"
                        - "443:443/udp"
                        - "8080:8080"
                        - "8082:8082"
                        - "34200:34200/tcp"
                        - "34200:34200/udp"
                command:
                        - "--global.checknewversion=true"
                        - "--global.sendanonymoususage=false"
                        - "--api.dashboard=true"
                        - "--api.debug=true"
                        - "--entrypoints.http.address=:80"
                        - "--entrypoints.https.address=:443"
                        - "--entrypoints.traefik.address=:8080"
                        - "--entrypoints.metrics.address=:8082"
                        - "--entrypoints.plex.address=:34200"
                        #- "--certificatesresolvers.dns-cloudflare.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
                        - "--certificatesresolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL"
                        - "--certificatesresolvers.dns-cloudflare.acme.storage=/acme/acme.json"
                        - "--certificatesresolvers.dns-cloudflare.acme.dnschallenge=true"
                        - "--certificatesresolvers.dns-cloudflare.acme.dnschallenge.provider=cloudflare"
                        - "--certificatesresolvers.dns-cloudflare.acme.dnschallenge.resolvers=1.1.1.1:53, 1.0.0.1:53"
                        - "--providers.docker.endpoint=tcp://dockerproxy:2375"
                        - "--providers.docker.defaultrule=Host(`{{ index .Labels \"com.docker.compose.service\" }}`)"
                        - "--providers.docker.network=traefik_proxy"
                        - "--providers.docker.exposedbydefault=false"
                        - "--providers.docker.swarmmode=false"
                        - "--providers.file.filename=/config/rules.yml"
                        - "--providers.file.watch=true"
                        - "--log.level=DEBUG"
                        - "--log.filepath=/logs/traefik.log"
                        - "--log.format=json"
                        - "--accesslog.filepath=/logs/access.log"
                        - "--accesslog.format=json"
                        - "--accesslog.bufferingsize=100"
                        - "--accesslog.filters.statuscodes=100-199, 200-299, 300-399, 400-499, 500-599, 600-699"
                        - "--accesslog.filters.retryattempts=true"
                        - "--accesslog.filters.minduration=10ms"
                        - "--accesslog.fields.defaultmode=keep"
                        - "--accesslog.fields.names.clientusername=keep"
                        - "--accesslog.fields.headers.defaultmode=keep"
                        #- "--accesslog.fields.headers.names.user-agent=redact"
                        #- "--accesslog.fields.headers.names.authorization=drop"
                        - "--accesslog.fields.headers.names.content-type=keep"
                        - "--metrics.prometheus.addentrypointslabels=true"
                        - "--metrics.prometheus.addserviceslabels=true"
                        - "--metrics.prometheus.entrypoint=metrics"
                        - "--metrics.prometheus.buckets=0.1, 0.3, 1.2, 5.0"
                volumes:
                        - ./traefik/config:/config:ro
                        - ./traefik/acme:/acme
                        - ./traefik/logs:/logs
                        - ./shared:/shared
                        - /etc/localtime:/etc/localtime:ro
                environment:
                        - TZ=$TZ
                        - DOMAIN_NAME=$DOMAIN_NAME
                        - CF_API_EMAIL=$CLOUDFLARE_EMAIL
                        - CF_API_KEY=$CLOUDFLARE_API_KEY
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                depends_on:
                        - dockerproxy
                labels:
                        - "com.ouroboros.enable=false"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.traefik-rtr.entrypoints=https"
                        - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAIN_NAME`)"
                        - "traefik.http.routers.traefik-rtr.tls=true"
                        - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAIN_NAME"
                        - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAIN_NAME"
                        - "traefik.http.routers.traefik-rtr.middlewares=traefik-chain@file, traefik-label-headers"
                        - "traefik.http.middlewares.traefik-label-headers.headers.sslhost=traefik.$DOMAIN_NAME"
                        - "traefik.http.middlewares.traefik-label-headers.headers.accesscontrolalloworigin=https://$DOMAIN_NAME"
                        - "traefik.http.middlewares.traefik-label-headers.headers.allowedhosts=traefik.$DOMAIN_NAME"
                        - "traefik.http.routers.traefik-rtr.service=api@internal"

        pihole:
                container_name: pihole
                hostname: pihole
                image: pihole/pihole:v4.4
                restart: unless-stopped
                healthcheck:
                        test: dig @127.0.0.1 pi.hole || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                cap_add:
                        - NET_ADMIN
                dns:
                        - 127.0.0.1
                        - 1.1.1.1
                networks:
                        - traefik_proxy
                        - default
                ports:
                          - "53:53/tcp"
                          - "53:53/udp"
                          - "67:67/udp"
                          - "8182:80/tcp"
                          - "8183:443/tcp"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./pihole/pihole:/etc/pihole
                        - ./pihole/dnsmasq.d:/etc/dnsmasq.d
                        - ./pihole/resolv.conf:/etc/resolv.conf
                        - ./pihole/logs/pihole.log:/var/log/pihole.log
                        - ./pihole/logs/pihole-FTL.log:/var/log/pihole-FTL.log
                        - /etc/localtime:/etc/localtime:ro
                environment:
                        - TZ=$TZ
                        - ServerIP=$SERVER_IP
                        - DNS1=$ROUTER_IP
                        - DNS2=no
                        - WEBPASSWORD=$ADMIN_PASSWORD
                        - VIRTUAL_HOST=pihole.$DOMAIN_NAME
                        - DNSMASQ_LISTENING=all
                        - DNSMASQ_USER=pihole
                labels:
                        - "com.ouroboros.enable=false"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.pihole-secure.entrypoints=https"
                        - "traefik.http.routers.pihole-secure.rule=Host(`pihole.$DOMAIN_NAME`)"
                        - "traefik.http.routers.pihole-secure.tls=true"
                        - "traefik.http.routers.pihole-secure.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.pihole-secure.middlewares=pihole-chain@file"
                        - "traefik.http.routers.pihole-secure.service=pihole"
                        - "traefik.http.services.pihole.loadbalancer.server.port=80"

        homeassistant:
                container_name: homeassistant
                hostname: homeassistant
                image: homeassistant/home-assistant:latest
                restart: unless-stopped
                privileged: true
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                networks:
                        - traefik_proxy
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./homeassistant/.cloud:/config/.cloud
                        - ./homeassistant/deps:/config/deps
                        - ./homeassistant/.HA_VERSION:/config/.HA_VERSION
                        - ./homeassistant/.storage:/config/.storage
                        - ./homeassistant/tts:/config/tts
                        - ./homeassistant/config/automations.yaml:/config/automations.yaml
                        - ./homeassistant/config/configuration.yaml:/config/configuration.yaml
                        - ./homeassistant/config/groups.yaml:/config/groups.yaml
                        - ./homeassistant/config/scenes.yaml:/config/scenes.yaml
                        - ./homeassistant/config/scripts.yaml:/config/scripts.yaml
                        - ./homeassistant/config/secrets.yaml:/config/secrets.yaml
                        - ./homeassistant/config/custom_components:/config/custom_components
                        - ./homeassistant/logs/home-assistant.log:/config/home-assistant.log
                        - ./homeassistant/data/home-assistant_v2.db:/config/home-assistant_v2.db
                        - ./homeassistant/data/home-assistant_v2.db-shm:/config/home-assistant_v2.db-shm
                        - ./homeassistant/data/home-assistant_v2.db-wal:/config/home-assistant_v2.db-wal
                        - /etc/localtime:/etc/localtime:ro
                        - /var/run/docker.sock:/var/run/docker.sock:ro
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                        - $DOMAIN_NAME=$DOMAIN_NAME
                labels:
                        - "com.ouroboros.enable=true"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.homeassistant-secure.entrypoints=https"
                        - "traefik.http.routers.homeassistant-secure.rule=Host(`homeassistant.$DOMAIN_NAME`)"
                        - "traefik.http.routers.homeassistant-secure.tls=true"
                        - "traefik.http.routers.homeassistant-secure.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.homeassistant-secure.middlewares=noauth-chain@file"
                        - "traefik.http.routers.homeassistant-secure.service=homeassistant"
                        - "traefik.http.services.homeassistant.loadbalancer.server.port=8123"

        mosquitto:
                container_name: mosquitto
                hostname: mosquitto
                image: eclipse-mosquitto:latest
                user: $PUID:$PGID
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                networks:
                        - default
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                ports:
                        - "1883:1883"
                        - "9001:9001"
                volumes: 
                        - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
                        - ./mosquitto/config/passwd:/mosquitto/config/passwd
                        - ./mosquitto/data:/mosquitto/data
                        - ./mosquitto/logs:/mosquitto/logs
                        - /etc/localtime:/etc/localtime:ro
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                labels:
                        - "com.ouroboros.enable=true"

        transmission:
                container_name: transmission
                hostname: transmission
                image: haugene/transmission-openvpn:latest-armhf
                restart: unless-stopped
                healthcheck:
                        #test: date || exit 1
                        test: /etc/scripts/healthcheck.sh || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                security_opt:
                        - no-new-privileges:true
                cap_add:
                        - NET_ADMIN
                devices:
                        - /dev/net/tun
                dns:
                        - 1.1.1.1
                        - 1.0.0.1
                networks:
                        - traefik_proxy
                        - media_proxy
                          #- default
                ports:
                        - "9091:9091"
                        - "8888:8888/tcp"
                        - "8888:8888/udp"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./transmission/transmission.log:/data/transmission-home/transmission.log
                        - ./transmission/stats.json:/data/transmission-home/stats.json
                        - $DOWNLOAD_PATH/complete:/downloads/complete
                        - $DOWNLOAD_PATH/incomplete:/downloads/incomplete
                        - $DOWNLOAD_PATH/watch/:/downloads/watch
                        - $DOWNLOAD_PATH/resume:/data/transmission-home/resume
                        - $DOWNLOAD_PATH/torrents:/data/transmission-home/torrents
                        - /etc/localtime:/etc/localtime:ro
                env_file:
                        - ./shared/env-files/transmission.env
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                        - OPENVPN_PROVIDER=$VPN_PROVIDER
                        - OPENVPN_USERNAME=$VPN_USERNAME
                        - OPENVPN_PASSWORD=$VPN_PASSWORD
                        - LOCAL_NETWORK=$LOCAL_NETWORK
                        - TRANSMISSION_RPC_USERNAME=$TRANSMISSION_USERNAME
                        - TRANSMISSION_RPC_PASSWORD=$ADMIN_PASSWORD
                labels:
                        - "com.ouroboros.enable=true"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.transmission-secure.entrypoints=https"
                        - "traefik.http.routers.transmission-secure.rule=Host(`transmission.$DOMAIN_NAME`)"
                        - "traefik.http.routers.transmission-secure.tls=true"
                        - "traefik.http.routers.transmission-secure.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.transmission-secure.middlewares=noauth-chain@file"
                        - "traefik.http.routers.transmission-secure.service=transmission"
                        - "traefik.http.services.transmission.loadbalancer.server.port=9091"

        nzbget:
                container_name: nzbget
                hostname: nzbget
                image: linuxserver/nzbget
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                security_opt:
                        - no-new-privileges:true
                networks:
                        - traefik_proxy
                        - media_proxy
                #ports:
                #        - "6789:6789"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                volumes:
                        - ./nzbget:/config
                        - $DOWNLOAD_PATH:/downloads
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                labels:
                        - "com.ouroboros.enable=true"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.nzbget-rtr.entrypoints=https"
                        - "traefik.http.routers.nzbget-rtr.rule=Host(`nzbget.$DOMAIN_NAME`)"
                        - "traefik.http.routers.nzbget-rtr.tls=true"
                        - "traefik.http.routers.nzbget-rtr.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.nzbget-rtr.middlewares=noauth-chain@file"
                        - "traefik.http.routers.nzbget-rtr.service=nzbget"
                        - "traefik.http.services.nzbget.loadbalancer.server.port=6789"

        ressync:
                container_name: ressync
                hostname: ressync
                image: linuxserver/resilio-sync
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                security_opt:
                        - no-new-privileges:true
                networks:
                        - traefik_proxy
                        - media_proxy
                ports:
                        - "55555:55555"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./ressync/config:/config
                        - $DOWNLOAD_PATH/ressync/downloads:/downloads
                        - $DOWNLOAD_PATH/ressync/sync:/sync
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                        - UMASK_SET=022
                labels:
                        - "com.ouroboros.enable=true"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.ressync-rtr.entrypoints=https"
                        - "traefik.http.routers.ressync-rtr.rule=Host(`ressync.$DOMAIN_NAME`)"
                        - "traefik.http.routers.ressync-rtr.tls=true"
                        - "traefik.http.routers.ressync-rtr.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.ressync-rtr.middlewares=noauth-chain@file"
                        - "traefik.http.routers.ressync-rtr.service=ressync"
                        - "traefik.http.services.ressync.loadbalancer.server.port=8888"

        radarr:
                container_name: radarr
                hostname: radarr
                image: linuxserver/radarr:latest
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                security_opt:
                        - no-new-privileges:true
                networks:
                        - traefik_proxy
                        - media_proxy
                        #- default
                ports:
                        - "7878:7878"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./radarr:/config
                        - $DOWNLOAD_PATH/watch/:/downloads/watch
                        - $DOWNLOAD_PATH/complete:/downloads/complete
                        - $DOWNLOAD_PATH/incomplete:/downloads/incomplete
                        - $MEDIA_PATH/movies:/movies
                        - /etc/localtime:/etc/localtime:ro
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                        - UMASK_SET=022
                labels:
                        - "com.ouroboros.enable=true"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.radarr-secure.entrypoints=https"
                        - "traefik.http.routers.radarr-secure.rule=Host(`radarr.$DOMAIN_NAME`)"
                        - "traefik.http.routers.radarr-secure.tls=true"
                        - "traefik.http.routers.radarr-secure.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.radarr-secure.middlewares=noauth-chain@file"
                        - "traefik.http.routers.radarr-secure.service=radarr"
                        - "traefik.http.services.radarr.loadbalancer.server.port=7878"

        sonarr:
                container_name: sonarr
                hostname: sonarr
                image: linuxserver/sonarr:latest
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                security_opt:
                        - no-new-privileges:true
                networks:
                        - traefik_proxy
                        - media_proxy
                        #- default
                ports:
                        - "8989:8989"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./sonarr:/config
                        - $DOWNLOAD_PATH/complete:/downloads/complete
                        - $DOWNLOAD_PATH/incomplete:/downloads/incomplete
                        - $DOWNLOAD_PATH/watch:/downloads/watch
                        - $MEDIA_PATH/tvshows:/tv
                        - /etc/localtime:/etc/localtime:ro
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                        - UMASK_SET=022
                labels:
                        - "com.ouroboros.enable=true"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.sonarr-secure.entrypoints=https"
                        - "traefik.http.routers.sonarr-secure.rule=Host(`sonarr.$DOMAIN_NAME`)"
                        - "traefik.http.routers.sonarr-secure.tls=true"
                        - "traefik.http.routers.sonarr-secure.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.sonarr-secure.middlewares=secure-chain@file"
                        - "traefik.http.routers.sonarr-secure.service=sonarr"
                        - "traefik.http.services.sonarr.loadbalancer.server.port=8989"

        lidarr:
                container_name: lidarr
                hostname: lidarr
                image: linuxserver/lidarr:latest
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                security_opt:
                        - no-new-privileges:true
                networks:
                        - traefik_proxy
                        - media_proxy
                        #- default
                ports:
                        - "8686:8686"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./lidarr:/config
                        - $DOWNLOAD_PATH/complete:/downloads/complete
                        - $DOWNLOAD_PATH/incomplete:/downloads/incomplete
                        - $DOWNLOAD_PATH/watch:/downloads/watch
                        - $MUSIC_PATH:/music
                        - /etc/localtime:/etc/localtime:ro
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                        - UMASK_SET=022
                labels:
                        - "com.ouroboros.enable=false"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.lidarr-secure.entrypoints=https"
                        - "traefik.http.routers.lidarr-secure.rule=Host(`lidarr.$DOMAIN_NAME`)"
                        - "traefik.http.routers.lidarr-secure.tls=true"
                        - "traefik.http.routers.lidarr-secure.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.lidarr-secure.middlewares=secure-chain@file"
                        - "traefik.http.routers.lidarr-secure.service=lidarr"
                        - "traefik.http.services.lidarr.loadbalancer.server.port=8686"
        lazylibrarian:
                container_name: lazylibrarian
                hostname: lazylibrarian
                image: linuxserver/lazylibrarian:latest
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                security_opt:
                        - no-new-privileges:true
                networks:
                        - traefik_proxy
                        - media_proxy
                expose:
                        - "5299"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./lazylibrarian:/config
                        - $DOWNLOAD_PATH:/downloads
                        - $DOWNLOAD_PATH/complete:/downloads/complete
                        - $DOWNLOAD_PATH/incomplete:/downloads/incomplete
                        - $DOWNLOAD_PATH/watch:/downloads/watch
                        - $BOOKS_PATH:/books
                environment:
                        - PUID=$PUID
                        - PGID=$PGID
                        - TZ=$TZ
                labels:
                        - "com.ouroboros.enable=true"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.lazylibrarian-rtr.entrypoints=https"
                        - "traefik.http.routers.lazylibrarian-rtr.rule=Host(`lazylibrarian.$DOMAIN_NAME`)"
                        - "traefik.http.routers.lazylibrarian-rtr.tls=true"
                        - "traefik.http.routers.lazylibrarian-rtr.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.lazylibrarian-rtr.middlewares=secure-chain@file"
                        - "traefik.http.routers.lazylibrarian-rtr.service=lazylibrarian"
                        - "traefik.http.services.lazylibrarian.loadbalancer.server.port=5299"


        bazarr:
                container_name: bazarr
                hostname: bazarr
                image: linuxserver/bazarr
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                security_opt:
                        - no-new-privileges:true
                networks:
                        - traefik_proxy
                        - media_proxy
                ports:
                        - "6767:6767"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./bazarr:/config
                        - $MEDIA_PATH/movies:/movies
                        - $MEDIA_PATH/tvshows:/tv
                environment:
                        - PUID=$PUID
                        - PGID=$PGID
                        - TZ=$TZ
                        - UMASK_SET=022
                labels:
                        - "com.ouroboros.enable=true"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.bazarr-secure.entrypoints=https"
                        - "traefik.http.routers.bazarr-secure.rule=Host(`bazarr.$DOMAIN_NAME`)"
                        - "traefik.http.routers.bazarr-secure.tls=true"
                        - "traefik.http.routers.bazarr-secure.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.bazarr-secure.middlewares=secure-chain@file"
                        - "traefik.http.routers.bazarr-secure.service=bazarr"
                        - "traefik.http.services.bazarr.loadbalancer.server.port=6767"

        jackett:
                container_name: jackett
                hostname: jackett
                image: linuxserver/jackett:latest
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                security_opt:
                        - no-new-privileges:true
                #expose:
                ports:
                        - "9117:9117"
                #network_mode: container:transmission-vpn
                networks:
                        - traefik_proxy
                        - media_proxy
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./jackett:/config/Jackett
                        - $DOWNLOAD_PATH/watch:/watch
                        - /etc/localtime:/etc/localtime:ro
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                        - RUN_OPTS=--ProxyConnection=transmission:8888
                labels:
                        - "com.ouroboros.enable=true"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.jackett-secure.entrypoints=https"
                        - "traefik.http.routers.jackett-secure.rule=Host(`jackett.$DOMAIN_NAME`)"
                        - "traefik.http.routers.jackett-secure.tls=true"
                        - "traefik.http.routers.jackett-secure.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.jackett-secure.middlewares=secure-chain@file"
                        - "traefik.http.routers.jackett-secure.service=jackett"
                        - "traefik.http.services.jackett.loadbalancer.server.port=9117"

        plex:
                container_name: plex
                hostname: $PLEX_HOSTNAME
                image: linuxserver/plex:latest
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                networks:
                        - traefik_proxy
                        - media_proxy
                        #- default
                #network_mode: host
                devices:
                        - /dev/dri:/dev/dri
                ports:
                        - "32400:32400/tcp"
                        - "32400:32400/udp"
                        - "3005:3005/tcp"
                        - "8324:8324/tcp"
                        - "1900:1900/udp"
                        - "5354:5353/udp"
                        - "32410:32410/udp"
                        - "32412:32412/udp"
                        - "32413:32413/udp"
                        - "32414:32414/udp"
                        - "32469:32469/tcp"
                        - "32469:32469/udp"
                        - "33400:33400"
                        - "33443:33443"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./plex/crash-reports:/config/Library/Application Support/Plex Media Server/Crash Reports
                        - ./plex/logs:/config/Library/Application Support/Plex Media Server/Logs
                        - ./plex/media:/config/Library/Application Support/Plex Media Server/Media
                        - ./plex/metadata:/config/Library/Application Support/Plex Media Server/Metadata
                        - ./plex/plugins:/config/Library/Application Support/Plex Media Server/Plug-ins
                        - ./plex/plugin-support:/config/Library/Application Support/Plex Media Server/Plug-in Support
                        - ./plex/preferences.xml:/config/Library/Application Support/Plex Media Server/Preferences.xml
                        #- ./plex:/config
                        - $MEDIA_PATH/plex-prerolls:/prerolls
                        - $MEDIA_PATH/tvshows:/tv
                        - $MEDIA_PATH/movies:/movies
                        #- $MEDIA_PATH/music:/music
                        - $MUSIC_PATH:/music
                        - $BOOKS_PATH:/books
                        - $MEDIA_PATH/photos:/photos
                        - /etc/localtime:/etc/localtime:ro
                        - transcode:/transcode
                environment:
                        - PUID=$PUID
                        - PGID=$PGID
                        - TZ=$TZ
                        - HOSTNAME=$PLEX_HOSTNAME
                        - PLEX_CLAIM=$PLEX_CLAIM
                        - ADVERTISE_IP=$PLEX_IP
                        - VERSION=docker
                        - UMASK_SET=022
                labels:
                        - "com.ouroboros.enable=true"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        #- "traefik.tcp.routers.plex-tcp-rtr.entrypoints=plex"
                        #- "traefik.tcp.routers.plex-tcp-rtr.rule="
                        - "traefik.http.routers.plex-secure.entrypoints=https"
                        - "traefik.http.routers.plex-secure.rule=Host(`plex.$DOMAIN_NAME`)"
                        - "traefik.http.routers.plex-secure.tls=true"
                        - "traefik.http.routers.plex-secure.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.plex-secure.middlewares=noauth-chain@file"
                        - "traefik.http.routers.plex-secure.service=plex"
                        - "traefik.http.services.plex.loadbalancer.server.port=32400"

        plex-test:
                container_name: plex-test
                hostname: plex-test
                image: linuxserver/plex:latest
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                networks:
                        - traefik_proxy
                        - media_proxy
                        #- default
                #network_mode: host
                devices:
                        - /dev/dri:/dev/dri
                #ports:
                #        - "32400:32400/tcp"
                #        - "32400:32400/udp"
                #        - "3005:3005/tcp"
                #        - "8324:8324/tcp"
                #        - "1900:1900/udp"
                #        - "5354:5353/udp"
                #        - "32410:32410/udp"
                #        - "32412:32412/udp"
                #        - "32413:32413/udp"
                #        - "32414:32414/udp"
                #        - "32469:32469/tcp"
                #        - "32469:32469/udp"
                #        - "33400:33400"
                #        - "33443:33443"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./plex-test:/config
                        #- ./shared:/shared
                        - $MEDIA_PATH/plex-prerolls:/prerolls
                        #- $MEDIA_PATH/tvshows:/tv
                        - $MEDIA_PATH/movies:/movies
                        #- $MEDIA_PATH/music:/music
                        #- $MEDIA_PATH/photos:/photos
                        #- $MEDIA_PATH/tmp/transcode:/transcode
                        - /etc/localtime:/etc/localtime:ro
                environment:
                        - PUID=$PUID
                        - PGID=$PGID
                        - TZ=$TZ
                        - HOSTNAME=plex-test
                        - PLEX_CLAIM=claim-jxHbBCNeYk8_eCwRSivE
                        - ADVERTISE_IP=https://plex-test.$DOMAIN_NAME:32400
                        - VERSION=docker
                        - UMASK_SET=022
                labels:
                        - "com.ouroboros.enable=false"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.tcp.routers.plex-tcp-rtr.entrypoints=plex"
                        - "traefik.tcp.routers.plex-tcp-rtr.rule=HostSNI(`plex-test.$DOMAIN_NAME`)"
                        - "traefik.tcp.routers.plex-tcp-rtr.service=plex-test"
                        - "traefik.tcp.routers.plex-tcp-rtr.tls.passthrough=true"
                        - "traefik.tcp.routers.plex-tcp-rtr.tls.certresolver=dns-cloudflare"
                        #- "traefik.tcp.services.plex-test."
                        - "traefik.http.routers.plex-test-rtr.entrypoints=https"
                        - "traefik.http.routers.plex-test-rtr.rule=Host(`plex-test.$DOMAIN_NAME`)"
                        - "traefik.http.routers.plex-test-rtr.tls=true"
                        - "traefik.http.routers.plex-test-rtr.tls.certresolver=dns-cloudflare"
                        #- "traefik.http.routers.plex-test-rtr.middlewares=noauth-chain@file"
                        - "traefik.http.routers.plex-test-rtr.service=plex-test"
                        - "traefik.http.services.plex-test.loadbalancer.server.port=32400"

        tautulli:
                container_name: tautulli
                hostname: tautulli
                image: linuxserver/tautulli:latest
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                security_opt:
                        - no-new-privileges:true
                networks:
                        - traefik_proxy
                        - media_proxy
                ports: 
                        - "8181:8181"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./tautulli:/config
                        - ./tautulli/logs:/logs
                        - ./plex/logs:/plex-logs:ro
                        - /etc/localtime:/etc/localtime:ro
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                labels:
                        - "com.ouroboros.enable=true"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.tautulli-secure.entrypoints=https"
                        - "traefik.http.routers.tautulli-secure.rule=Host(`tautulli.$DOMAIN_NAME`)"
                        - "traefik.http.routers.tautulli-secure.tls=true"
                        - "traefik.http.routers.tautulli-secure.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.tautulli-secure.middlewares=noauth-chain@file"
                        - "traefik.http.routers.tautulli-secure.service=tautulli"
                        - "traefik.http.services.tautulli.loadbalancer.server.port=8181"
        ombi:
                container_name: ombi
                hostname: ombi
                image: linuxserver/ombi
                #user: $PUID:$PGID
                restart: unless-stopped
                networks:
                        - traefik_proxy
                        - media_proxy
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./ombi:/config
                        - /etc/localtime:/etc/localtime:ro
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                labels:
                        - "com.ouroboros.enable=true"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.ombi-secure.entrypoints=https"
                        - "traefik.http.routers.ombi-secure.rule=Host(`ombi.$DOMAIN_NAME`)"
                        - "traefik.http.routers.ombi-secure.tls=true"
                        - "traefik.http.routers.ombi-secure.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.ombi-secure.middlewares=noauth-chain@file"
                        - "traefik.http.routers.ombi-secure.service=ombi"
                        - "traefik.http.services.ombi.loadbalancer.server.port=3579"


        varken:
                container_name: varken
                hostname: varken
                image: boerderij/varken:latest
                user: $PUID:$PGID
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                security_opt:
                        - no-new-privileges:true
                networks:
                        - media_proxy
                        - default
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./varken/:/config
                        - /etc/localtime:/etc/localtime:ro
                env_file:
                        - ./shared/env-files/varken.env
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                        - VRKN_GLOBAL_MAXMIND_LICENSE_KEY=$MAXMIND_KEY
                        - VRKN_INFLUXDB_USERNAME=$VARKEN_DB_USER
                        - VRKN_INFLUXDB_PASSWORD=$VARKEN_DB_PASSWORD
                        - VRKN_TAUTULLI_1_APIKEY=$TAUTULLI_API_KEY
                        - VRKN_SONARR_1_APIKEY=$SONARR_API_KEY
                        - VRKN_RADARR_1_APIKEY=$RADARR_API_KEY
                        - VRKN_LIDARR_1_APIKEY=$LIDARR_API_KEY
                        - VRKN_OMBI_1_APIKEY=$OMBI_API_KEY
                depends_on:
                        - influxdb
                labels:
                        - "com.ouroboros.enable=true"
                
        nextcloud:
                container_name: nextcloud
                hostname: nextcloud
                image: cacreek/nextcloud-full:latest-armv7l
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                networks:
                        - traefik_proxy
                        - default
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./nextcloud:/var/www/html
                        - ./nextcloud/config/custom.config.php:/var/www/html/config/custom.config.php:ro
                        - $NC_DATA_PATH/nextcloud:/opt/data
                        - ./postgres/sock:/var/run/postgresql
                        - /dev/urandom:/dev/urandom:ro
                        - /etc/localtime:/etc/localtime:ro
                env_file:
                        - ./shared/env-files/nextcloud.env
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                        - NEXTCLOUD_UPDATE=1
                        - DOMAIN_NAME=$DOMAIN_NAME
                        - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.$DOMAIN_NAME
                        - POSTGRES_HOST=$POSTGRES_HOST
                        - POSTGRES_DB=$NEXTCLOUD_DB
                        - POSTGRES_USER=$NEXTCLOUD_DB_USER
                        - POSTGRES_PASSWORD=$NEXTCLOUD_DB_PASSWORD
                        - REDIS_HOST=$REDIS_HOST
                        - REDIS_HOST_PORT=$REDIS_PORT
                        - REDIS_HOST_PASSWORD=$REDIS_PASSWORD
                depends_on:
                        - postgres
                        - redis
                labels:
                        - "com.ouroboros.enable=true"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.nextcloud-secure.entrypoints=https"
                        - "traefik.http.routers.nextcloud-secure.rule=Host(`nextcloud.$DOMAIN_NAME`)"
                        - "traefik.http.routers.nextcloud-secure.tls=true"
                        - "traefik.http.routers.nextcloud-secure.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.nextcloud-secure.middlewares=nextcloud-chain@file"
                        - "traefik.http.routers.nextcloud-secure.service=nextcloud"
                        - "traefik.http.services.nextcloud.loadbalancer.server.port=80"

        influxdb: # metrics and time-series db 
                container_name: influxdb
                hostname: influxdb
                image: influxdb:latest
                user: $PUID:$PGID
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                security_opt:
                        - no-new-privileges:true
                networks:
                        - default
                ports:
                        - "8086:8086/tcp"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./influxdb/db:/var/lib/influxdb
                        - ./influxdb/.influx_history:/.influx_history
                        - ./influxdb/config:/etc/influxdb
                        - ./influxdb/config/influxdb.conf:/etc/influxdb/influxdb.conf:ro
                        - ./influxdb/logs/:/var/log/influxdb
                        - /etc/localtime:/etc/localtime:ro
                        
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                        - INFLUXDB_HTTP_AUTH_ENABLED=true
                        - INFLUXDB_ADMIN_USER=$INFLUXDB_USER
                        - INFLUXDB_ADMIN_PASSWORD=$ADMIN_PASSWORD
                labels:
                        - "com.ouroboros.enable=false"

        prometheus: # metrics db for clusters
                container_name: prometheus
                hostname: prometheus
                image: prom/prometheus
                restart: unless-stopped
                networks:
                        - default
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 2m
                        timeout: 10s
                        retries: 3
                ports:
                        - "9090:9090"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
                        - /etc/localtime:/etc/localtime:ro
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                labels:
                        - "com.ouroboros.enable=true"
                

        # TODO: add administration webui; options:
        # https://www.adminer.org/en/ && https://github.com/vrana/adminer/
        # https://github.com/phppgadmin/phppgadmin
        postgres: # SQL Database
                container_name: postgres
                hostname: postgres
                image: postgres:latest
                user: $PUID:$PGID
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                security_opt:
                        - no-new-privileges:true
                ports:
                        - "5432:5432"
                networks:
                        - default
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./postgres/data:/var/lib/postgresql/data
                        - ./postgres/logs:/var/log/postgresql
                        - ./postgres/sock:/var/run/postgresql
                        - ./shared/scripts/psql-init.sh:/docker-entrypoint-initdb.d/psql-init.sh
                        - /etc/localtime:/etc/localtime:ro
                environment:
                        - TZ=$TZ
                        - PGTZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                        - POSTGRES_USER=$POSTGRES_USER
                        - POSTGRES_PASSWORD=$ADMIN_PASSWORD
                labels:
                        - "com.ouroboros.enable=false"

        redis: # caching db https://redis.io
                container_name: redis
                hostname: redis
                image: redis:latest
                restart: always
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                command: redis-server /usr/local/etc/redis/redis.conf
                networks:
                        - default
                ports:
                        - "6379:6379"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./redis/data:/data
                        - ./redis/logs:/var/log/redis
                        - /etc/localtime:/etc/localtime:ro
                        - ./redis/config/redis.conf:/usr/local/etc/redis/redis.conf:ro
                        - ./redis/config/passwd.conf:/usr/local/etc/redis/passwd.conf:ro
                labels:
                        - "com.ouroboros.enable=false"

        # TODO: look into prometheus' node_manager
        # https://github.com/prometheus/node_exporter
        telegraf:
                container_name: telegraf
                hostname: telegraf
                image: telegraf:latest
                #user: $PUID:$PGID
                restart: always
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                networks:
                        - default
                #expose: 
                #        - "8092"
                #        - "8125"
                #        - "8094"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./telegraf/logs:/var/log/telegraf
                        - ./telegraf/config/telegraf.conf:/etc/telegraf/telegraf.conf:ro
                        - /proc:/host/proc:ro
                        - /usr/bin/vcgencmd:/usr/bin/vcgencmd
                        - /var/run/docker.sock:/var/run/docker.sock:ro
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                        - HOST_PROC=/host/proc
                        - REDIS_PASSWORD=$REDIS_PASSWORD
                labels:
                        - "com.ouroboros.enable=true"

        grafana:
                image: grafana/grafana:master
                hostname: grafana
                container_name: grafana
                #user: 472:$PGID
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                networks:
                        - traefik_proxy
                        - default
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./grafana/data:/var/lib/grafana
                        - ./grafana/provisioning:/etc/grafana/provisioning
                        - ./grafana/logs:/var/log/grafana
                        - ./postgres/sock:/var/run/postgresql
                        - /etc/localtime:/etc/localtime:ro
                env_file:
                        - ./shared/env-files/grafana.env
                environment:
                        - TZ=$TZ
                        - PUID=$PUID
                        - PGID=$PGID
                        - GF_SERVER_DOMAIN=grafana.$DOMAIN_NAME
                        - GF_SERVER_ROOT_URL=https://grafana.$DOMAIN_NAME
                        - GF_DATABASE_HOST=$POSTGRES_HOST
                        - GF_DATABASE_NAME=$GRAFANA_DB
                        - GF_DATABASE_USER=$GRAFANA_DB_USER
                        - GF_DATABASE_PASSWORD=$GRAFANA_DB_PASSWORD
                        - GF_REMOTE_CACHE_CONNSTR=addr=$REDIS_HOST:$REDIS_PORT,pool_size=100,db=1
                        - GF_SECURITY_ADMIN_USER=$GRAFANA_ADMIN_USER
                        - GF_SECURITY_ADMIN_PASSWORD=$ADMIN_PASSWORD
                        #- GF_SMTP_USER=
                        #- GF_SMTP_PASSWORD=
                        #- GF_SMTP_FROM_ADDRESS=admin@grafana.localhost
                        #- GF_SMTP_EHLO_IDENTITY=dashboard.example.com
                depends_on:
                        - postgres
                        - grafana-image-renderer
                labels:
                        - "com.ouroboros.enable=true"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.grafana-secure.entrypoints=https"
                        - "traefik.http.routers.grafana-secure.rule=Host(`grafana.$DOMAIN_NAME`)"
                        - "traefik.http.routers.grafana-secure.tls=true"
                        - "traefik.http.routers.grafana-secure.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.grafana-secure.middlewares=noauth-chain@file"
                        - "traefik.http.routers.grafana-secure.service=grafana"
                        - "traefik.http.services.grafana.loadbalancer.server.port=3000"

        grafana-image-renderer:
                container_name: grafana-image-renderer
                hostname: gf-renderer
                image: cacreek/grafana-image-renderer-armv7l:latest-armv7l
                user: $PUID:$PGID
                restart: unless-stopped
                security_opt:
                        - no-new-privileges:true
                ports:
                        - "127.0.0.1:8081:8081"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                environment:
                        - ENABLE_METRICS=true
                labels:
                        - "com.ouroboros.enable=true"
        
        # TODO: add Prometheus' AlertManager
        # https://prometheus.io/docs/alerting/overview/

        ha-dockermon:
                container_name: ha-dockermon
                hostname: ha-dockermon
                image: philhawthorne/ha-dockermon:arm
                user: $PUID:$PGID
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                ports:
                        - "127.0.0.1:8126:8126"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - ./ha-dockermon/config:/config
                        - ./ha-dockermon/config/configuration.yml:/config/configuration.yml:ro
                        - ./ha-dockermon/logs:/var/log/ha-dockermon
                        - /var/run/docker.sock:/var/run/docker.sock:ro
                        - /etc/localtime:/etc/localtime:ro
                labels:
                        - "com.ouroboros.enable=true"

        smtp:
                container_name: smtp
                hostname: smtp
                image: ixdotai/smtp
                #user: $PUID:$PGID
                restart: unless-stopped
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                networks:
                        - traefik_proxy
                        - default
                ports:
                        - "25:25"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                #environment:
                labels:
                        - "com.ouroboros.enable=true"
                        - "traefik.enable=true"
                        - "traefik.docker.network=traefik_proxy"
                        - "traefik.http.routers.smtp-rtr.entrypoints=https"
                        - "traefik.http.routers.smtp-rtr.rule=Host(`smtp.$DOMAIN_NAME`)"
                        - "traefik.http.routers.smtp-rtr.tls=true"
                        - "traefik.http.routers.smtp-rtr.tls.certresolver=dns-cloudflare"
                        - "traefik.http.routers.smtp-rtr.middlewares=noauth-chain@file"
                        - "traefik.http.routers.smtp-rtr.service=smtp"
                        - "traefik.http.services.smtp.loadbalancer.server.port=25"


        docker-prune:
                container_name: docker-prune
                hostname: docker-prune
                image: cacreek/docker-prune:latest-armv7l
                #user: $PUID:$PGID
                restart: unless-stopped
                command: --filter "until=24h"
                healthcheck:
                        test: date || exit 1
                        start_period: 1m
                        interval: 5m
                        timeout: 10s
                        retries: 3
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - /var/run/docker.sock:/var/run/docker.sock:ro
                environment:
                        - OPTIONS=system
                        - SLEEP=86400
                labels:
                        - "com.ouroboros.enable=true"

        ouroboros:
                container_name: ouroboros
                hostname: ouroboros
                image: pyouroboros/ouroboros
                user: $PUID:$PGID
                restart: unless-stopped
                networks: 
                        - default
                ports:
                        - "127.0.0.1:8000:8000"
                logging:
                        driver: json-file
                        options:
                                max-size: "10m"
                                max-file: "5"
                volumes:
                        - /var/run/docker.sock:/var/run/docker.sock:ro
                environment:
                        - TZ=$TZ
                        - CLEANUP=true
                        - CRON="0 9 * * *"
                        - LOG_LEVEL=info
                        # disable self update or ports will be lost upon update
                        - SELF_UPDATE=false
                        - LABLE_ENABLE=true
                        - DATA_EXPORT=prometheus
                        - PROMETHEUS_ADDR=0.0.0.0
                        - PROMETHEUS_PORT=8000

